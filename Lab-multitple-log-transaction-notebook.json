{"version":"5","defaultTimeframe":{"from":"now()-24h","to":"now()"},"sections":[{"id":"e12d493a-fda4-44f3-906f-44e508e52f01","type":"dql","showTitle":false,"drilldownPath":[],"title":"Find logs from specific source","state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\")","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"b83b9453-9068-4877-ae8d-8c5bdfc53fb7","type":"dql","title":"find records with all transaction ids","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter contains(content, \"DYNATRANSACTION\")\n| sort timestamp asc","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"e226d890-7a5b-4d63-87ed-d4b68db92911","type":"dql","showTitle":false,"drilldownPath":[],"title":"find specific transaction id","state":{"input":{"value":"fetch logs\n| filter contains(content, \"20240626DYNATRANSACTION20414\")\n| sort timestamp asc","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"2ce27f37-fca1-40a6-9bb8-37585658f186","type":"dql","title":"XML Capture","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs \n| filter matchesValue(log.file.path, \"/var/log/multilog/processor-01.log\")\n//| parse content, pattern:\"LD '<transactionid>'LD:transactionID'</transactionid>'\"\n//| fields timestamp, transactionID, log.file.name","timeframe":{"from":"now-2h","to":"now"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"f2236e92-74b2-4393-b322-7ee22115ea1c","type":"dql","title":"JSON Capture","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs \n| filter matchesValue(log.file.path, \"/var/log/multilog/processor-02.log\")\n//| parse content, \"JSON:json\"\n//| fieldsAdd transactionID = json[transactionid], customMessage = json[message]\n//| fields timestamp, transactionID, log.file.name","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"865bc06f-5ab5-4a09-b226-2758ee8582c4","type":"dql","title":"Plain text capture","showTitle":false,"drilldownPath":[],"showInput":true,"state":{"input":{"value":"fetch logs \n| filter matchesValue(log.file.path, \"/var/log/multilog/processor-03.log\")\n| parse content, pattern:\"LD ',valid,'LD:transactionID','\"\n| fields timestamp, transactionID, log.file.name","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"a02a4472-fbf2-4f5c-896e-9fe62ff670aa","type":"markdown","markdown":"#### So we've got 3 of 6 records captured, but what happens when we try to aggregate into single variable ? "},{"id":"efc8dc87-20c5-47fe-b2fa-4414be0baec9","type":"dql","title":"DQL works via an oder of operations, re-setting the same variable \"transactionID\" won't provide the desired results","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\")\n| parse content, pattern:\"LD '<transactionid>'LD:transactionID'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID = json[transactionid], customMessage = json[message]\n| parse content, pattern:\"LD ',valid,'LD:transactionID','\"\n| fields timestamp, transactionID, log.file.name","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"df7629af-0a53-44bd-812c-8d36e90c8644","type":"markdown","markdown":"#### To prevent the overwriting, we can set a conditional variable for each capture record. One option is to do that through an if/else mechanism to check if the variable has been set, if not it will iterate through until it returns a result or comes back null: "},{"id":"60f4294a-6992-4c39-a49b-076a0fb0e6de","type":"dql","showTitle":false,"drilldownPath":[],"title":"Conditional Variables","state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\")\n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03)))\n| fields timestamp, transactionID, log.file.name","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"d94382c3-c2ab-42e6-af27-4da04a2f575c","type":"markdown","markdown":"#### What about nested json?\nhops 4 & 5 are very similar to pull data from, we can use the same type LD parse strings to pull out the values.\n\nHowever looking at the logs for hop #6\n\n\nlog record 2 has the needed transaction id in the top level json object\n```json\n{\n  \"timestamp\": \"2024-06-27 20:09:02.289\",\n  \"level\": \"info\",\n  \"appVersion\": \"1.22.0\",\n  \"message\": \"Hey there!\",\n  \"logLogger\": \"fake.cron.job\",\n  \"transactionid\": \"20240627DYNATRANSACTION9158\",\n  \"logType\": \"transactional record of 20240627DYNATRANSACTION9158\",\n  \"hopMessage\": \"hop 2\",\n  \"processorNumber\": \"processor2\",\n  \"metadata\": {\n    \"purpleMonkeyDishwasherId\": \"eDC0yqo0fp2tg7V\",\n    \"transactionlocation\": \"processor2\",\n    \"device02external\": \"2024-06-27 20:09:02.289z\",\n    \"orininationtimestamp\": \"2024-06-27 20:09:01.978\"\n  }\n}\n```\nlog record 6 has the needed transaction ID nested under \"metadata\" json object. How do we acceess it? \n```json\n{\n  \"timestamp\": \"2024-06-27 20:09:04.233\",\n  \"level\": \"info\",\n  \"appVersion\": \"0.1.0\",\n  \"message\": \"the final step!\",\n  \"purpleMonkeyDishwasherId\": \"eDC0yqo0fp2tg7V\",\n  \"logLogger\": \"totally.nota.cronjob\",\n  \"logType\": \"the most important transaction record\",\n  \"hopMessage\": \"hop #6\",\n  \"processorNumber\": \"processor 6\",\n  \"metadata\": {\n    \"originialTransactionId\": \"20240627DYNATRANSACTION9158\",\n    \"transactionlocation\": \"processor6\",\n    \"orininationtimestamp\": \"2024-06-27 20:09:04.233\"\n  }\n}\n```"},{"id":"1ebb1339-e929-4d62-ab64-47cfba195d84","type":"dql","showTitle":false,"drilldownPath":[],"title":"Capturing top level json compared to nested json","state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\")\n//| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n//| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n//| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n//| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n| fields timestamp, transactionID02, transactionID06\n","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"eb77a316-a0b7-4ac1-9a74-575bc545a562","type":"dql","title":"Extract & Merge All Transaction IDs!","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\")\n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03, else: if(isNotNull(transactionID04), transactionID04, else: if(isNotNull(transactionID05), transactionID05, else: if(isNotNull(transactionID06), transactionID06))))))\n| fields timestamp, transactionID, log.file.name","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"1496beaf-a05e-4414-8691-8da19890bee8","type":"dql","title":"Here's what that looks like with out merging","showTitle":false,"drilldownPath":[],"showInput":true,"state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\")\n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n\n| fields timestamp, transactionID01, transactionID02, transactionID03, transactionID04, transactionID05, transactionID, log.file.name","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"7598e0b7-724e-4831-bb39-07c82b9a231b","type":"markdown","markdown":"#### But wait! \n\nThere's another id in here which is *business critical* which hasn't been identified until now:\n**the purple monkey dishwasher ID!!**\n\nThis transaction only exists in two of the transaction logs, #2 & #6"},{"id":"92644a76-a935-4d58-aff1-d9f8e1b0c9b3","type":"dql","showTitle":false,"drilldownPath":[],"title":"Single Transaction with Purple Monkey Dishwasher ID","state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\")\n| filter contains(content, \"20240626DYNATRANSACTION3790\")\n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n// added json parsing for PMDWID\n| fieldsAdd purpleMonkeyDishwasherID01 = json[metadata][purpleMonkeyDishwasherId]\n| fieldsAdd purpleMonkeyDishwasherID02 = json[purpleMonkeyDishwasherId]\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03, else: if(isNotNull(transactionID04), transactionID04, else: if(isNotNull(transactionID05), transactionID05, else: if(isNotNull(transactionID06), transactionID06))))))\n| fieldsAdd purpleMonkeyDishwasherID = if(isNotNull(purpleMonkeyDishwasherID01), purpleMonkeyDishwasherID01, else:if(isNotNull(purpleMonkeyDishwasherID02), purpleMonkeyDishwasherID02))\n| fields timestamp, transactionID, purpleMonkeyDishwasherID, log.file.name\n","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"11d8cc53-bbad-43c2-a465-7ca707914984","type":"markdown","markdown":"#### OH! And there's revenue data which has to be tied back to the PMWID.... but it'd doesn't exist in the same records.\n#### NOT A PROBLEM WITH DQL!!!"},{"id":"941a7ff8-82e8-4085-bf0f-26c2b126250d","type":"dql","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\")\n| filter contains(content, \"20240626DYNATRANSACTION21637\")\n| parse content, pattern:\"LD '<transactionid>'LD:transactionID01'</transactionid>'\"\n| parse content, \"JSON:json\"\n| fieldsAdd transactionID02 = json[transactionid]\n| parse content, pattern:\"LD ',valid,'LD:transactionID03','\"\n| parse content, pattern:\"LD 'internalizedTracking#:'LD:transactionID04','\"\n// Added revenue from hop #4\n| parse content, pattern:\"LD 'transactionValue: 'LD:revenue','\"\n| parse content, pattern:\"LD '>PMW-'LD:transactionID05'</operation>'\"\n| fieldsAdd transactionID06 = json[metadata][originialTransactionId]\n| fieldsAdd purpleMonkeyDishwasherID01 = json[metadata][purpleMonkeyDishwasherId]\n| fieldsAdd purpleMonkeyDishwasherID02 = json[purpleMonkeyDishwasherId]\n| fieldsAdd transactionID = if(isNotNull(transactionID01), transactionID01, else:if(isNotNull(transactionID02), transactionID02, else: if(isNotNull(transactionID03), transactionID03, else: if(isNotNull(transactionID04), transactionID04, else: if(isNotNull(transactionID05), transactionID05, else: if(isNotNull(transactionID06), transactionID06))))))\n| fieldsAdd purpleMonkeyDishwasherID = if(isNotNull(purpleMonkeyDishwasherID01), purpleMonkeyDishwasherID01, else:if(isNotNull(purpleMonkeyDishwasherID02), purpleMonkeyDishwasherID02))\n| fields timestamp, transactionID, revenue, purpleMonkeyDishwasherID, log.file.name\n","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"d8089e44-47a7-486c-a8a3-88f5601daa27","type":"markdown","markdown":"### With DQL there are multiple ways to solve a problem. Even when a new problem arises....\n\nWhat if you want to query two different transaction ids? or transaction id & a PMDWid?"},{"id":"9af5b7c9-c3e1-46be-a4f1-089f06e6234a","type":"dql","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\") and (matchesPhrase(content, \"20240627DYNATRANSACTION9902\") or matchesPhrase(content, \"20240627DYNATRANSACTION30395\"))\n| fields timestamp, content, log.source, log.file.path","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"bfe5203b-adc7-4556-8c32-782a74686070","type":"dql","title":"Parsing Data with ALL possible permutations for start and end of variables","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\")\n| sort timestamp desc\n//| filter matchesValue(log.source, \"/var/log/multilog/*\") and matchesPhrase(content, \"20240627DYNATRANSACTION15566\")\n| parse content, \"\"\"DATA ('transactionid>'| 'transactionid\": \"'| 'valid,' | 'internalizedTracking#:' | 'transactionid\">PMW-' | 'originialTransactionId\": \"') LD:transactionID ('<'| '\"' | ',') \"\"\"\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:hop ('<'| '\"' | ',') \"\"\"\n| parse content, \"\"\"DATA 'transactionValue: ' FLOAT:revenue \"\"\"\n| parse content, \"\"\" DATA 'purpleMonkeyDishwasherId\": \"' LD:purpleMonkeyDishwasherID01 '\"' \"\"\"\n\n// | parse content, \"\"\" DATA ('initationtime: '| 'external\": \"' | 'transaction initiated @ ' | 'starttime: ' | 'orininationtimestamp\": \"') TIMESTAMP('yyyy-MM-dd HH:mm:ss', timezone='UTC'):transactionTimestamp\"\"\"\n// | parse content, \"\"\" DATA ('initationtime: '| 'external\": \"' | 'transaction initiated @ ' | 'starttime: ' | 'orininationtimestamp\": \"') TIMESTAMP:transactionTimestamp2\"\"\"\n\n| fields timestamp,  purpleMonkeyDishwasherID01, transactionID, revenue, hop, content, log.file.path\n\n/*\n\n<transactionid>20240627DYNATRANSACTION2682<\ntransactionid\": \"20240627DYNATRANSACTION2682\"\nvalid,20240627DYNATRANSACTION2682,\ntransactionSpyId007,internalizedTracking#:20240627DYNATRANSACTION2682,\ntransactionid\">PMW-20240627DYNATRANSACTION2682<\n\"originialTransactionId\": \"20240627DYNATRANSACTION2682\"\n\n","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}},{"id":"b68d4378-12ba-4ca0-9c95-a91da4ab9b96","type":"dql","title":"Single Transactions & Network Latency for each","showTitle":false,"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| filter matchesValue(log.source, \"/var/log/multilog/*\") \n| sort timestamp desc\n| parse content, \"\"\"DATA ('transactionid>'| 'transactionid\": \"'| 'valid,' | 'internalizedTracking#:' | 'transactionid\">PMW-' | 'originialTransactionId\": \"') LD:transactionID ('<'| '\"' | ',')\"\"\"\n| parse content, \"\"\"DATA ('DEVICE0'| ',device0'| 'hopMessage\": \"hop #' | 'hopMessage\": \"hop ' ) LD:hop ('<'| '\"' | ',')\"\"\"\n| parse content, \"\"\"DATA 'transactionValue: ' FLOAT:revenue \"\"\"\n| parse content, \"\"\" DATA 'purpleMonkeyDishwasherId\": \"' LD:purpleMonkeyDishwasherID01 '\"' \"\"\"\n\n| fieldsAdd hop1_timestamp = if(hop == \"1\", timestamp),\n            hop2_timestamp = if(hop == \"2\", timestamp),\n            hop3_timestamp = if(hop == \"3\", timestamp),\n            hop4_timestamp = if(hop == \"4\", timestamp),\n            hop5_timestamp = if(hop == \"5\", timestamp),\n            hop6_timestamp = if(hop == \"6\", timestamp)\n\n| summarize {transactionStart = takeLast(timestamp),\n            transactionEnd =  takeFirst(timestamp),\n            purpleMonkeyDishwasherID01 = takeAny(purpleMonkeyDishwasherID01),\n            revenue = takeAny(revenue),\n            hop1 = takeAny(hop1_timestamp),\n            hop2 = takeAny(hop2_timestamp),\n            hop3 = takeAny(hop3_timestamp),\n            hop4 = takeAny(hop4_timestamp),\n            hop5 = takeAny(hop5_timestamp),\n            hop6 = takeAny(hop6_timestamp)},\n            by:{transactionID}\n\n| fieldsAdd totalTime = transactionEnd-transactionStart,\n            hop1 = hop2-hop1,\n            hop2 = hop3-hop2,\n            hop3 = hop4-hop3,\n            hop4 = hop5-hop4,\n            hop5 = hop6-hop5\n\n| fields    transactionStart,\n            transactionEnd,\n            transctionDetails = concat(\"purpleMonkeyDishwasherID01=\",purpleMonkeyDishwasherID01,\",\",\"transactionID=\",transactionID,\",\", \"revenue=\", revenue),\n            purpleMonkeyDishwasherID01,\n            transactionID,\n            revenue,\n            totalTime,\n            hop1,\n            hop2,\n            hop3,\n            hop4,\n            hop5\n            \n| sort transactionStart desc","timeframe":{"from":"now()-24h","to":"now()"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}},"honeycomb":{"shape":"hexagon","legend":"auto"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false}}}]}